@name Sussy spider
@model models/led.mdl
@persist [O E Dr]:entity [C1 C2 C3 C4]:vector Ms A FD [F1]:vector [AF]:vector Drive Da AirTime LegLen T
@persist [P1 P2 FR1HP RP1]:vector [P3 P4 FR2HP RP2]:vector [P5 P6 FR3HP RP3]:vector [P7 P8 FR4HP RP4]:vector
@persist [OffCol OnCol]:vector LegsSpeedMult
@persist DamageTaken DamageIndexes:table


function hide(){
    E:setAlpha(0)
    Dr:setColor(Dr:getColor4():setW(0))
    A = holoEntity(0):angles():yaw()
    holoVisible(42,Dr,0)
}

function show(){
    E:setAlpha(255)
    Dr:setColor(Dr:getColor4():setW(255))
    holoColor(42,OffCol)
    holoVisible(42,Dr,1)
}

if(first() || dupefinished()){
    E = entity():isWeldedTo()
    if(!E:isVehicle()){ #[printColor(vec(240,100,100),"Put it on a seat, dumbass")]# E=seatSpawn("models/sprops/geometry/sphere_96.mdl",entity():toWorld(vec(0,0,70)),ang(0),0) }
    entity():setColor(vec4(0))
    
    DamageTaken = 0
    LegsSpeedMult = 1 / 3
    DamageIndexes = table(2, 5, 7, 8)
    N = 40
    holoCreate(0,E:pos()+vec(0,0,20),vec(N/4),ang(0,E:angles():yaw(),0),vec(80),"hq_rcylinder_thick") holoParent(0,E)
    OffCol = vec(85,20,20)
    OnCol = vec(240,20,20)
    
    holoCreate(42,E:pos()+E:forward()*18+E:up()*32,vec(1),E:toLocal(ang(21,-45,-155)),OffCol,"models/props_phx/construct/metal_dome90.mdl")
    holoParent(42,0) holoMaterial(42,"models/props_combine/tprings_globe")
    
    E:setMass(50000)
    O = owner() Ms = 50000 T=0 A=E:angles():yaw() FD = 70 
    
    C1 = E:toWorld( vec(N,-N,N/1.8+8) )
    C2 = E:toWorld( vec(-N,-N,N/1.8+8) )
    C3 = E:toWorld( vec(-N,N,N/1.8+8) )
    C4 = E:toWorld( vec(N,N,N/1.8+8) )
    holoCreate(1,C1,vec(1),E:angles()+ang(0,45,90),vec(100),"models/cheeze/wires/speaker.mdl") holoParent(1,0)
    holoCreate(2,C2,vec(1),E:angles()+ang(0,-45,90),vec(100),"models/cheeze/wires/speaker.mdl") holoParent(2,0)
    holoCreate(3,C3,vec(1),E:angles()-ang(0,-45,90),vec(100),"models/cheeze/wires/speaker.mdl") holoParent(3,0)
    holoCreate(4,C4,vec(1),E:angles()-ang(0,45,90),vec(100),"models/cheeze/wires/speaker.mdl") holoParent(4,0)
    
    F1 = vec(0,0,Ms)
    LegLen = 100
    AirTime = curtime()
    runOnTick(1)
    Id = 5 #1 Leg
    holoCreate(Id) holoColor(Id,vec(60)) holoScaleUnits(Id,vec(LegLen+32,16,16))
    holoCreate(Id+1) holoColor(Id+1,vec(20)) holoScaleUnits(Id+1,vec(LegLen+24,12,12)) holoModel(Id,"rcube") holoModel(Id+1,"right_prism")
    Id = 7 #2 Leg
    holoCreate(Id) holoColor(Id,vec(60)) holoScaleUnits(Id,vec(LegLen+32,16,16))
    holoCreate(Id+1) holoColor(Id+1,vec(20)) holoScaleUnits(Id+1,vec(LegLen+24,12,12)) holoModel(Id,"rcube") holoModel(Id+1,"right_prism")
    Id = 9 #3 Leg
    holoCreate(Id) holoColor(Id,vec(60)) holoScaleUnits(Id,vec(LegLen+32,16,16))
    holoCreate(Id+1) holoColor(Id+1,vec(20)) holoScaleUnits(Id+1,vec(LegLen+24,12,12)) holoModel(Id,"rcube") holoModel(Id+1,"right_prism")
    Id = 11 #4 Leg
    holoCreate(Id) holoColor(Id,vec(60)) holoScaleUnits(Id,vec(LegLen+32,16,16))
    holoCreate(Id+1) holoColor(Id+1,vec(20)) holoScaleUnits(Id+1,vec(LegLen+24,12,12)) holoModel(Id,"rcube") holoModel(Id+1,"right_prism")
    
    holoCreate(1337,E:toWorld(vec(0,-45,20)),vec(5,6,5),E:angles(),vec(120),"hq_rcube_thick")
    holoParent(1337,0) holoMaterial(1337,"models/XQM/Deg360")
    holoPos(0,E:toWorld(vec(0,0,10)))
}
else{
    if(tickClk()){
        if(changed(E:driver())){ if(E:driver():isPlayer()){ Dr = E:driver() FD = 82 hide() Drive = 1} else{show() FD = 42 T=0 Drive = 0} }
        rangerFilter(array(E,entity(),Dr))
        
        Evel = E:vel()
        R1 = rangerOffsetHull(FD*2,E:pos()+Evel/Ms,vec(0,0,-1),vec(N*3))
        F1 = vec(0,0,(FD-min(R1:distance(),FD)))*Ms
        E:applyForce(F1+$F1*10)
        if(!R1:hit()){ E:applyForce(vec(0,0,-Ms*5*(curtime()-AirTime)^2))}
        else{AirTime = curtime()}
        
        Ang = ang(0,A,0)
        
        #AF = (E:toLocal(Ang) - E:angVel()):up()*Ms
        #E:applyAngForce(AF+$AF*10)
        #E:applyTorque(AF + $AF*5)
        #E:applyTorque(-shiftR(vec(P:angles() + P:angVel())) * P:mass())
        E:applyTorque(-shiftR(vec(E:angles() + E:angVel())) * Ms * 5)
        
        if(Drive){
            Forw = Dr:keyForward()-Dr:keyBack()
            Righ = Dr:keyRight()  -Dr:keyLeft()
            Jmp = Dr:keyJump()
            Da = Dr:eyeAngles():yaw()-90
            holoAng(0,ang(0,Da+$Da,0))
            DoJmp = (changed(Jmp) && Jmp)
            DoMov = (Forw!=0||Righ!=0)
            local DDD=change(Da+$Da)
            if(DDD>1){DoMov=1}
            if(DoMov){T = (T+Evel:length()*LegsSpeedMult/100)%360} else{T=0}
            
            if(DoJmp){AirTime = curtime()}
            E:applyForce((1+1.5*Dr:keySprint())* (vec(Righ*20 , (Forw) * 20 , DoJmp * 600 )):rotate(ang(0,Da,0)) * Ms-Evel*Ms/(50/(1+1*(!DoMov&&!DoJmp)+3*O:keyWalk())) )
            
            holoColor(42,OnCol+randvec(vec(-2.5),vec(2.5)))
        }
        else{E:applyForce(-Evel*Ms/40)}
        #leg 1
        E1 = holoEntity(1)
        RP1 = E1:pos() + Evel/Ms
        U1 = E1:up()
        Fow1 = E1:forward()
        FR1 = rangerOffsetHull(LegLen*2,RP1+U1*LegLen*1.414,E1:right()-E1:up(),vec(12))
        if(FR1:hit()){FR1HP = FR1:pos() - vec(sin(T)/4,sin(T)/4,cos(T)/4):rotateAroundAxis(Fow1,45)*LegLen*DoMov }
        else{FR1HP = RP1+E1:right()*LegLen HP1 = vec(0,0,-LegLen*1.414) }
        
        HP1 = (FR1HP-RP1)/2
        
        Y1 = sqrt(LegLen^2 + HP1:length()^2)
        JointPos1 = HP1:normalized():rotateAroundAxis(Fow1,-90) *Y1
        
        P2 = (RP1+HP1+JointPos1)
        P1 = RP1/2+P2/2
        
        holoPos(5,P1+$P1)
        holoAng(5,(P1-RP1):toAngle())
        holoPos(6,(FR1HP+P2+$P2)/2)
        holoAng(6,(FR1HP-P2):toAngle())
        
        #leg 2
        E2 = holoEntity(2)
        RP2 = E2:pos() + Evel/Ms
        U2 = E2:up()
        Fow2 = E2:forward()
        FR2 = rangerOffsetHull(LegLen*2,RP2+U2*LegLen*1.414,E2:right()-E2:up(),vec(12))
        if(FR2:hit()){FR2HP = FR2:pos() - vec(0,sin(T+90)/4,cos(T+90)/4):rotateAroundAxis(Fow2,45)*LegLen*DoMov }
        else{FR2HP = RP2+E2:right()*LegLen HP2 = vec(0,0,-LegLen*1.414) }
        
        HP2 = (FR2HP-RP2)/2
        
        Y2 = sqrt(LegLen^2 + HP2:length()^2)
        JointPos2 = HP2:normalized():rotateAroundAxis(Fow2,-90) *Y2
        
        P4 = (RP2+HP2+JointPos2)
        P3 = RP2/2+P4/2
        
        holoPos(7,P3+$P3)
        holoAng(7,(P3-RP2):toAngle())
        holoPos(8,(FR2HP+P4+$P4)/2)
        holoAng(8,(FR2HP-P4):toAngle())
        
        #leg 3
        E3 = holoEntity(3)
        RP3 = E3:pos() + Evel/Ms
        U3 = E3:up()
        Fow3 = E3:forward()
        FR3 = rangerOffsetHull(LegLen*2,RP3+U3*LegLen*1.414,-E3:right()-E3:up(),vec(12))
        if(FR3:hit()){FR3HP = FR3:pos() - vec(0,sin(T+180)/4,cos(T+180)/4):rotateAroundAxis(Fow3,45)*LegLen*DoMov }
        else{FR3HP = RP3-E3:right()*LegLen HP3 = vec(0,0,-LegLen*1.414) }
        
        HP3 = (FR3HP-RP3)/2
        
        Y3 = sqrt(LegLen^2 + HP3:length()^2)
        JointPos3 = HP3:normalized():rotateAroundAxis(Fow3,90) *Y3
        
        P6 = (RP3+HP3+JointPos3)
        P5 = RP3/2+P6/2
        
        holoPos(9,P5+$P5)
        holoAng(9,(P5-RP3):toAngle())
        holoPos(10,(FR3HP+P6+$P6)/2)
        holoAng(10,(FR3HP-P6):toAngle())
        
        #leg 4
        E4 = holoEntity(4)
        RP4 = E4:pos() + Evel/Ms
        U4 = E4:up()
        Fow4 = E4:forward()
        FR4 = rangerOffsetHull(LegLen*2,RP4+U4*LegLen*1.414,-E4:right()-E4:up(),vec(12))
        if(FR4:hit()){FR4HP = FR4:pos() - vec(0,sin(T+270)/4,cos(T+270)/4):rotateAroundAxis(Fow4,45)*LegLen*DoMov }
        else{FR4HP = RP4-E4:right()*LegLen HP4 = vec(0,0,-LegLen*1.414) }
        
        HP4 = (FR4HP-RP4)/2
        
        Y4 = sqrt(LegLen^2 + HP4:length()^2)
        JointPos4 = HP4:normalized():rotateAroundAxis(Fow4,90) *Y4
        
        P8 = (RP4+HP4+JointPos4)
        P7 = RP4/2+P8/2
        
        holoPos(11,P7+$P7)
        holoAng(11,(P7-RP4):toAngle())
        holoPos(12,(FR4HP+P8+$P8)/2)
        holoAng(12,(FR4HP-P8):toAngle())
    
        if(DoMov){
            if(FR1:hit() && changed(sin(T)<-0.6) && sin(T)<-0.6){
                holoEntity(6):soundPlay(1,0.5,"npc/strider/strider_step"+randint(6)+".wav",0.75)
                soundVolume(1,0.5)
            }
            if(FR2:hit() && changed(sin(T+90)<-0.6) && sin(T+90)<-0.6){
                holoEntity(8):soundPlay(1,0.5,"npc/strider/strider_step"+randint(6)+".wav",0.75)
                soundVolume(1,0.5)
            }
            if(FR3:hit() && changed(sin(T+180)<-0.6) && sin(T+180)<-0.6){
                holoEntity(6):soundPlay(1,0.5,"npc/strider/strider_step"+randint(6)+".wav",0.75)
                soundVolume(1,0.5)
            }
            if(FR4:hit() && changed(sin(T+270)<-0.6) && sin(T+270)<-0.6){
                holoEntity(6):soundPlay(1,0.5,"npc/strider/strider_step"+randint(6)+".wav",0.75)
                soundVolume(1,0.5)
            }
        }
        if(DoJmp && R1:hit()){
            local Tm = 2-Evel:length()/Ms*20
            E:soundPlay(0,Tm,"npc/headcrab_poison/ph_jump"+randint(3)+".wav",Tm*1.2)
            soundPitch(0,50)
            soundVolume(0,0.5)
            MovTime = curtime()
        }
    }
}
if(!E:isValid()){selfDestruct()}

event damage(Victim:entity, Damage:damage) {
    if(Victim == E) {
        OveralDamage = Damage:getDamage()
        if(Damage:getType() == 1){
            E:soundPlay("Blunt", 0.75, "npc/dog/dog_footstep_run"+randint(8)+".wav")
            soundVolume("Blunt", 2)
            OveralDamage /= 4
        }
        DamageTaken += OveralDamage
        if (DamageTaken >= 120){
            Indx = DamageIndexes[randint(4), number]
            E:soundPlay("Damage", 1.6, "npc/strider/striderx_pain"+Indx+".wav")
            DamageTaken = 0
        }
    }
}
