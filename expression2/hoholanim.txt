@name HoholAnim
@persist [E O OW]:entity I V:vector
function entity np(){
    EE=entity()
    for(I=1,players():count()){
            if((players()[I,entity]:pos()-entity():pos()):length()<(EE:pos()-entity():pos()):length() || EE==entity()){EE=players()[I,entity]}
        }
    return EE
}
if(first()){
    entity():setAlpha(0)
    O=owner()
    #OW=findPlayerByName("Requietio")
    #OW=O
    OW=np()
    holoCreate(1,entity():pos(),vec(1),O:angles(),vec(255),O:model())
    holoVisible(1,players(),0)
    #E = holoEntity(1)
    holoCreate(2,entity():pos()-entity():up()*25,vec(1),O:weapon():angles(),vec(255),O:weapon():model())
    runOnTick(1) 
    timer("A",10)
    E = propSpawn(OW:model(),entity():pos(),1)
    
   # printTable(E:bones())
    
}
if(E:type()!=""){
if(changed(np())){OW=np() OW:setColor(OW:getColor4())}
if(clk("A")){ E:animate(OW:getAnimation()) holoAng(2,E:angles()-ang(90,0,90)) holoPos(2,E:bonePos(12)+E:bone(12):up()*OW:weapon():height())} 
#if(changed(O:isAlive()) && O:isAlive()){O:plySetArmor(100)}
if(changed(OW:getAnimation())){
    E:animate(OW:getAnimation())
}
E:manipulateBoneAng(3,ang(0,0,(OW:pos()-E:pos()):toAngle():roll()))
#E:setAng(vec(vec2(O:aimPos()-E:pos())):toAngle())
E:setAng(vec(vec2(OW:pos()-E:pos())):toAngle())
#print(O:aimPos()-E:pos())
#if(changed(OW:model())){holoModel(1,OW:model())}
if(changed(OW:model())){E:setModel(OW:model()) holoEntity(2):parentToBone(E,12) timer("A",10)}
if(changed(OW:weapon():model())){if(OW:weapon():type()!="none"){holoModel(2,OW:weapon():model()) holoAng(2,E:angles()-ang(90,0,90)) holoPos(2,E:bonePos(12)+E:bone(12):up()*OW:weapon():height())}else{holoModel(2,"models/led.mdl")}}
#holoAng(2,E:angles())
#if((O:getAnimation()>124 && O:getAnimation()<128) || O:getAnimation()==114 || O:getAnimation()==119 || O:getAnimation()==131 || O:getAnimation()==130 ){
#    holoPos(1,E:pos()+vec(0,0,O:vel():z()/O:mass()*(O:vel():z()>=-190)))
#}
}
else{holoDeleteAll() selfDestruct()}
