@name Windows10.3M
@inputs [Screen Device]:wirelink Keyboard
@persist [App AppPos AppEGPID]:table #Apps
@persist AppTimerClk StartEGPID Update:string #Functions
@persist SysTextEnable SysTextLine
@persist ContextMenu:string
@persist AllApps:table [AppLaunch AppCreate AppGraphics ThisApp AppClose AppMove AppResize CallAppEvent DialogApp]:string 
@persist LongTap SysText:string SysTextTimer
@persist SystemOn Resolution:vector2 #System
@persist ROM:gtable FullLoad #ROM
@persist CursorPos:vector2 Mouse1 ChangedMouse1 #IO
@persist SysTimerNum SysTimer Threads NowThreads AppTimerNum AppTimer #Timer
@persist DialogAppChanged SysTextEnableChanged #Changed
@persist StartMenuChoose:string

if(duped()){reset()}
if(first()){
    
    function number apiVersion(){return 4.3}
    StartEGPID=11
    
    function number   glbN(AppName:string,VarName:string){return App[AppName,table][VarName,number]}
    function string   glbS(AppName:string,VarName:string){return App[AppName,table][VarName,string]}
    function vector   glbV(AppName:string,VarName:string){return App[AppName,table][VarName,vector]}
    function vector2 glbV2(AppName:string,VarName:string){return App[AppName,table][VarName,vector2]}
    function vector4 glbV4(AppName:string,VarName:string){return App[AppName,table][VarName,vector4]}
    function array    glbR(AppName:string,VarName:string){return App[AppName,table][VarName,array]}
    function table    glbT(AppName:string,VarName:string){return App[AppName,table][VarName,table]}
    function entity   glbE(AppName:string,VarName:string){return App[AppName,table][VarName,entity]}
    function angle    glbA(AppName:string,VarName:string){return App[AppName,table][VarName,angle]}
    
    function number   appN(VarName:string){return App[ThisApp,table][VarName,number]}
    function string   appS(VarName:string){return App[ThisApp,table][VarName,string]}
    function vector   appV(VarName:string){return App[ThisApp,table][VarName,vector]}
    function vector2 appV2(VarName:string){return App[ThisApp,table][VarName,vector2]}
    function vector4 appV4(VarName:string){return App[ThisApp,table][VarName,vector4]}
    function array    appR(VarName:string){return App[ThisApp,table][VarName,array]}
    function table    appT(VarName:string){return App[ThisApp,table][VarName,table]}
    function entity   appE(VarName:string){return App[ThisApp,table][VarName,entity]}
    function angle    appA(VarName:string){return App[ThisApp,table][VarName,angle]}
    
    #Write persist
    function glbN(AppName:string,VarName:string,Write)          {App[AppName,table][VarName,number]=Write}
    function glbS(AppName:string,VarName:string,Write:string)   {App[AppName,table][VarName,string]=Write}
    function glbV(AppName:string,VarName:string,Write:vector)   {App[AppName,table][VarName,vector]=Write}
    function glbV2(AppName:string,VarName:string,Write:vector2) {App[AppName,table][VarName,vector2]=Write}
    function glbV4(AppName:string,VarName:string,Write:vector4) {App[AppName,table][VarName,vector4]=Write}
    function glbE(AppName:string,VarName:string,Write:entity)   {App[AppName,table][VarName,entity]=Write}
    function glbA(AppName:string,VarName:string,Write:angle)    {App[AppName,table][VarName,angle]=Write}
    function glbR(AppName:string,VarName:string,Write:array)    {App[AppName,table][VarName,array]=Write}
    function glbT(AppName:string,VarName:string,Write:table)    {App[AppName,table][VarName,table]=Write}
    
    function appN(VarName:string,Write)          {App[ThisApp,table][VarName,number]=Write}
    function appS(VarName:string,Write:string)   {App[ThisApp,table][VarName,string]=Write}
    function appV(VarName:string,Write:vector)   {App[ThisApp,table][VarName,vector]=Write}
    function appV2(VarName:string,Write:vector2) {App[ThisApp,table][VarName,vector2]=Write}
    function appV4(VarName:string,Write:vector4) {App[ThisApp,table][VarName,vector4]=Write}
    function appE(VarName:string,Write:entity)   {App[ThisApp,table][VarName,entity]=Write}
    function appA(VarName:string,Write:angle)    {App[ThisApp,table][VarName,angle]=Write}
    function appR(VarName:string,Write:array)    {App[ThisApp,table][VarName,array]=Write}
    function appT(VarName:string,Write:table)    {App[ThisApp,table][VarName,table]=Write}
    
    function romSaveApp(AppName:string){ROM["Apps",table][AppName,table]=App[AppName,table]}
    function romLoadApp(AppName:string){App[AppName,table]=ROM["Apps",table][AppName,table]}
    function romLoadAppVars(AppName:string){App[AppName,table]=App[AppName,table]:add(ROM["Apps",table][AppName,table])}
    function number romCreate(){if(!ROM["Apps",table][ThisApp,table]){ROM["Apps",table][ThisApp,table]=table() return 1} return 0}
    
    function romSaveApp(){romSaveApp(ThisApp)}
    function romLoadApp(){romLoadApp(ThisApp)}
    function romLoadAppVars(){romLoadAppVars(ThisApp)}
    
    function romLoad(Table:table){
        ROM["Apps",table]=Table["Apps",table] 
        ROM["System",table]=Table["System",table] 
        ROM["Version",number]==Table["Version",number]
        ROM["System",table]["AllApps",table]=table() }
    
    function number   romN(VarName:string){return ROM["Apps",table][ThisApp,table][VarName,number]}
    function string   romS(VarName:string){return ROM["Apps",table][ThisApp,table][VarName,string]}
    function vector   romV(VarName:string){return ROM["Apps",table][ThisApp,table][VarName,vector]}
    function vector2 romV2(VarName:string){return ROM["Apps",table][ThisApp,table][VarName,vector2]}
    function vector4 romV4(VarName:string){return ROM["Apps",table][ThisApp,table][VarName,vector4]}
    function array    romR(VarName:string){return ROM["Apps",table][ThisApp,table][VarName,array]}
    function table    romT(VarName:string){return ROM["Apps",table][ThisApp,table][VarName,table]}
    function entity   romE(VarName:string){return ROM["Apps",table][ThisApp,table][VarName,entity]}
    function angle    romA(VarName:string){return ROM["Apps",table][ThisApp,table][VarName,angle]}
    
    function romN(VarName:string,Write)          {ROM["Apps",table][ThisApp,table][VarName,number]=Write}
    function romS(VarName:string,Write:string)   {ROM["Apps",table][ThisApp,table][VarName,string]=Write}
    function romV(VarName:string,Write:vector)   {ROM["Apps",table][ThisApp,table][VarName,vector]=Write}
    function romV2(VarName:string,Write:vector2) {ROM["Apps",table][ThisApp,table][VarName,vector2]=Write}
    function romV4(VarName:string,Write:vector4) {ROM["Apps",table][ThisApp,table][VarName,vector4]=Write}
    function romE(VarName:string,Write:entity)   {ROM["Apps",table][ThisApp,table][VarName,entity]=Write}
    function romA(VarName:string,Write:angle)    {ROM["Apps",table][ThisApp,table][VarName,angle]=Write}
    function romR(VarName:string,Write:array)    {ROM["Apps",table][ThisApp,table][VarName,array]=Write}
    function romT(VarName:string,Write:table)    {ROM["Apps",table][ThisApp,table][VarName,table]=Write}
    
    function appToromN(VarName:string) {romN(VarName,appN(VarName))}
    function appToromS(VarName:string) {romS(VarName,appS(VarName))}
    function appToromV(VarName:string) {romV(VarName,appV(VarName))}
    function appToromV2(VarName:string){romV2(VarName,appV2(VarName))}
    function appToromV4(VarName:string){romV4(VarName,appV4(VarName))}
    function appToromE(VarName:string) {romE(VarName,appE(VarName))}
    function appToromR(VarName:string) {romR(VarName,appR(VarName))}
    function appToromT(VarName:string) {romT(VarName,appT(VarName))}
    
    function romToappN(VarName:string) {appN(VarName,romN(VarName))}
    function romToappS(VarName:string) {appS(VarName,romS(VarName))}
    function romToappV(VarName:string) {appV(VarName,romV(VarName))}
    function romToappV2(VarName:string){appV2(VarName,romV2(VarName))}
    function romToappV4(VarName:string){appV4(VarName,romV4(VarName))}
    function romToappE(VarName:string) {appE(VarName,romE(VarName))}
    function romToappR(VarName:string) {appR(VarName,romR(VarName))}
    function romToappT(VarName:string) {appT(VarName,romT(VarName))}
    
    #Mouse events
    function number appMouse(){return Mouse1&AppPos[ThisApp,number]==1}
    function number click(){return ChangedMouse1&!Mouse1}
    function number appClick(){return ChangedMouse1&!Mouse1&AppPos[ThisApp,number]==1}
    
    function number fastTap(){if(ChangedMouse1&Mouse1){LongTap=SysTimer} if((SysTimer-LongTap)<7&click()){LongTap=0 return 1} if(!Mouse1){LongTap=0} return 0}
    function number longTap(){if(ChangedMouse1&Mouse1){LongTap=SysTimer} if((SysTimer-LongTap)>7&Mouse1&LongTap) {LongTap=0 return 1} if(!Mouse1){LongTap=0} return 0}
    
    function number appFastTap(){if(ChangedMouse1&appMouse()){LongTap=AppTimer} if((AppTimer-LongTap)<7&appClick()){LongTap=0 return 1} if(!Mouse1&AppPos[ThisApp,number]==1){LongTap=0} return 0}
    function number appLongTap(){if(ChangedMouse1&appMouse()){LongTap=AppTimer} if((AppTimer-LongTap)>7&appMouse()&LongTap) {LongTap=0 return 1} if(!Mouse1&AppPos[ThisApp,number]==1){LongTap=0} return 0}
    
    #System
    function string sysText(){
        if(Keyboard&Keyboard!=154){SysTextTimer++}else{SysTextTimer=0}
        if((changed(Keyboard)|SysTextTimer>5)&Keyboard!=13&Keyboard!=154&!inrange(Keyboard,19,20)){
            local Length=SysText:length()
            if(Keyboard!=127){
                SysText=SysText:sub(1,Length-SysTextLine)+toChar(Keyboard)+SysText:sub(Length-SysTextLine+1,Length)
            }elseif(SysTextLine!=Length){
                SysText=SysText:sub(1,Length-SysTextLine-1)+SysText:sub(Length-SysTextLine+1,Length)
            }
        }
        return SysText
    }
    
    function vector2 autoResolution(){
        local ScreenSize=Screen:entity():aabbSize()
        local AutoResolution = vec2()
        if(ScreenSize:y()>ScreenSize:x()){
            AutoResolution=vec2(512,int((ScreenSize:x()/ScreenSize:y())*512))
            if(AutoResolution:y()<200){AutoResolution[2]=int((ScreenSize:z()/ScreenSize:y())*512)} }
        if(ScreenSize:y()<ScreenSize:x()){AutoResolution=vec2(512,int((ScreenSize:y()/ScreenSize:x())*512))}
        if(ScreenSize:y()==ScreenSize:x()){AutoResolution=vec2(512)}
    return AutoResolution}
    
    function findUser(){
        local Pos = ROM["System",table]["Control",number] ? Screen:entity():pos() : entity():pos()
        findInSphere(Pos,70) findSortByDistance(Pos) }
    
    function runSystem(EGPIDofApps){SystemOn=1 AppEGPID["FreeEGP",array]=array(vec2(EGPIDofApps+4,egpMaxObjects())) timer("runSystem",1) stoptimer("1")}
    
    function sound(Name:string){
        if(ROM["System",table]["SoundEnable",number]){
            local Sound = ""
            local Entity = ROM["System",table]["Control",number] ? Screen:entity() : entity()
            switch(Name){
                case "Click", Sound = "buttons/button1.wav"  Length=0.05 break
                case "Open", Sound = "buttons/button9.wav"   Length=0.1 break
                case "Close", Sound = "buttons/button15.wav" Length=0.1 break
            }
            Entity:soundPlay(Name,Length,Sound)
        }
    }
    
    #Timers
    function number sysTimer(Latency){if(clk()){SysTimerNum-- return !mod(SysTimer+SysTimerNum,int(Latency*NowThreads/100))} return 0}
    function number appTimer(Latency){if(clk()){AppTimerNum-- return !mod(AppTimer+AppTimerNum,int(Latency/100))} return 0}
    function number threadClk(){return Threads==1|sysTimer(100)}
    
    #Other
    function array  array:shortArray(Size){local Return = array() foreach(J, S:string = This){for(I = 1, S:length(), Size){Return:pushString(S:sub(I, I+Size-1))}} return Return }
    function array string:shortArray(Size){local Resuilt=array() for(I=1,int(This:length()/Size+1)){Resuilt:pushString(This:sub(1+Size*(I-1),Size*I))} return Resuilt}
    
    function array  array:cutArray(Size){local Resuilt=array() foreach(I,N:string=This){Resuilt[I,string]=N:left(Size)} return Resuilt}
    
    function string appChat(FunctionName:string){runOnChat(1)
        #!win AppName Varriable String
        if(chatClk(find())){
            local AppChat=find():lastSaid():explode(" ") 
            if(AppChat[1,string]=="!win"&AppChat[2,string]==ThisApp&AppChat[3,string]==FunctionName){
                hideChat(1) 
                return AppChat[4,string]
            } 
        } 
    return "" }
    
    function appChat(){runOnChat(1)
        #!win AppName Varriable Type Number
        if(chatClk(find())){
            local AppChat=find():lastSaid():explode(" ") 
            local AppChatExplode=AppChat[5,string]:explode(",")
            if(AppChat[1,string]=="!win"){hideChat(1) if(AppChat[2,string]==ThisApp){
                switch(AppChat[4,string]){
                case "number", appN(AppChat[3,string],AppChat[5,string]:toNumber()) break
                case "string", appS(AppChat[3,string],AppChat[5,string]) break
                case "vector", appV(AppChat[3,string],vec(AppChatExplode[1,string]:toNumber(),AppChatExplode[2,string]:toNumber(),AppChatExplode[3,string]:toNumber())) break
                case "vector2", appV2(AppChat[3,string],vec2(AppChatExplode[1,string]:toNumber(),AppChatExplode[2,string]:toNumber())) break
                case "vector4", appV4(AppChat[3,string],vec4(AppChatExplode[1,string]:toNumber(),AppChatExplode[2,string]:toNumber(),AppChatExplode[3,string]:toNumber(),AppChatExplode[4,string]:toNumber())) break
                case "angle",  appA(AppChat[3,string],ang(AppChatExplode[1,string]:toNumber(),AppChatExplode[2,string]:toNumber(),AppChatExplode[3,string]:toNumber())) break
                case "entity", appE(AppChat[3,string],entity(AppChat[5,string]:toNumber())) break
                case "void", App[AppChat[2,string],table]:remove(AppChat[3,string]) break
    }}}}}
    
    function number egp(AppName:string){return AppEGPID[AppName,vector2]:x()}
    function number egp(AppName:string,EGPID){return AppEGPID[AppName,vector2]:x()+EGPID}
    function number egp(){return AppEGPID[ThisApp,vector2]:x()}
    function number egp(EGPID){return AppEGPID[ThisApp,vector2]:x()+EGPID}
    
    function number egpInrange(EGPID){
        local Pos=vec2(Screen:egpGlobalPos(EGPID))
        local Size=Screen:egpSize(EGPID)/2
        return inrange(CursorPos,Pos-Size,Pos+Size)}
    function number egpAdvInrange(Pos1:vector2,Pos2:vector2,EGPparent){return inrange(CursorPos,Screen:egpPos(EGPparent)+Pos1,Screen:egpPos(EGPparent)+Pos2)}
    function number egpAppInrange(Pos1:vector2,Pos2:vector2){local AppPos=Screen:egpPos(egp()) return inrange(CursorPos,AppPos+Pos1,AppPos+Pos2)}
    
    function vector2 symbolSize(){return Resolution/512*vec2(0.52,1)}
    function number textSizeX(Number){local SymbolSize=symbolSize() return int(SymbolSize:x()*int(Number/SymbolSize:y())/2)*2}
    
    function vector2 choiceHelper(Pos:vector2,Step){return floor((CursorPos-Pos)/Step)}
    function vector2 appChoiceHelper(Pos:vector2,Step){return floor((CursorPos-Pos-Screen:egpPos(egp()))/Step)}
    function vector2 choiceHelper(Pos:vector2,Step:vector2){return floor((CursorPos-Pos)/Step)}
    function vector2 appChoiceHelper(Pos:vector2,Step:vector2){return floor((CursorPos-Pos-Screen:egpPos(egp()))/Step)}
    
    function vector egpUniColor(Color:vector){return vec(255)*(array(Color:x(),Color:y(),Color:z()):average()<190)}
    function vector egpUniColor(ParentID){return egpUniColor(Screen:egpColor(ParentID))}
    
    function egpAdvBox(ID,ParentID,Pos:vector2,Size:vector2,Color:vector){Screen:egpBox(ID,Pos,Size) Screen:egpColor(ID,Color) Screen:egpParent(ID,ParentID) } #Cost 1 egpID.
    function appBox(EGPID,Pos:vector2,Size:vector2,Color:vector){egpAdvBox(egp(EGPID),egp(),Pos,Size,Color)} #Cost 1 egpID.
    function appBox(EGPID,ParentID,Pos:vector2,Size:vector2,Color:vector){Screen:egpBox(egp(EGPID),Pos,Size) Screen:egpColor(egp(EGPID),Color) Screen:egpParent(egp(EGPID),egp(ParentID)) } #Cost 1 egpID.
    
    function egpAdvBoxOutline(ID,ParentID,Pos:vector2,Size:vector2,Color:vector){Screen:egpBoxOutline(ID,Pos,Size) Screen:egpColor(ID,Color) Screen:egpParent(ID,ParentID) } #Cost 1 egpID.
    function appBoxOutline(EGPID,Pos:vector2,Size:vector2,Color:vector){egpAdvBoxOutline(egp(EGPID),egp(),Pos,Size,Color)} #Cost 1 egpID.
    function appBoxOutline(EGPID,ParentID,Pos:vector2,Size:vector2,Color:vector){Screen:egpBoxOutline(egp(EGPID),Pos,Size) Screen:egpColor(egp(EGPID),Color) Screen:egpParent(egp(EGPID),egp(ParentID)) } #Cost 1 egpID.
    
    function egpWhiteText(ID,   ParentID,Text:string,Pos:vector2,Size){Screen:egpText(ID,Text,Pos) Screen:egpParent(ID,ParentID) Screen:egpSize(ID,Size/symbolSize():y()) } #Cost 1 egpID.
    function appWhiteText(EGPID,         Text:string,Pos:vector2){egpWhiteText(egp(EGPID),egp(),Text,Pos,10)} #Cost 1 egpID.
    function appWhiteText(EGPID,         Text:string,Pos:vector2,Size){egpWhiteText(egp(EGPID),egp(),Text,Pos,Size)} #Cost 1 egpID.
    function egpWhiteText(ID,   ParentID,Text:string,Pos:vector2,Size,Align){egpWhiteText(ID,ParentID,Text,Pos,Size) Screen:egpAlign(ID,Align) } #Cost 1 egpID.
    function appWhiteText(EGPID,         Text:string,Pos:vector2,Size,Align){egpWhiteText(egp(EGPID),egp(),Text,Pos,Size,Align)} #Cost 1 egpID.
    function appWhiteText(EGPID,ParentID,Text:string,Pos:vector2,Size,Align){egpWhiteText(egp(EGPID),egp(ParentID),Text,Pos,Size,Align)} #Cost 1 egpID.
    function egpWhiteText(ID,   ParentID,Array:array,Pos:vector2,Size){Screen:egpTextLayout(ID,Array:concat("\n"),Pos,vec2(Resolution:x(),Array:count()*Size)) Screen:egpSize(ID,Size/symbolSize():y()) Screen:egpParent(ID,ParentID)} #Cost 1 egpID.
    function appWhiteText(EGPID,         Array:array,Pos:vector2,Size){egpWhiteText(egp(EGPID),egp(),Array,Pos,Size)} #Cost 1 egpID.
    function appWhiteText(EGPID,         Array:array,Pos:vector2){egpWhiteText(egp(EGPID),egp(),Array,Pos,10)} #Cost 1 egpID.
    function egpWhiteText(ID,   ParentID,Text:string,Pos:vector2,Size,SizeV2:vector2){Screen:egpTextLayout(ID,Text,Pos,SizeV2) Screen:egpSize(ID,Size/symbolSize():y()) Screen:egpParent(ID,ParentID)} #Cost 1 egpID.
    function appWhiteText(EGPID,         Text:string,Pos:vector2,Size,SizeV2:vector2){egpWhiteText(egp(EGPID),egp(),Text,Pos,Size,SizeV2)} #Cost 1 egpID.
    function appWhiteText(EGPID,         Text:string,Pos:vector2,SizeV2:vector2){egpWhiteText(egp(EGPID),egp(),Text,Pos,10,SizeV2)} #Cost 1 egpID.
    function egpWhiteText(ID,   ParentID,Text:string,Pos:vector2,Size,SizeV2:vector2,Align){egpWhiteText(ID,ParentID,Text,Pos,Size,SizeV2) Screen:egpAlign(ID,Align)} #Cost 1 egpID.
    function appWhiteText(EGPID,         Text:string,Pos:vector2,Size,SizeV2:vector2,Align){egpWhiteText(egp(EGPID),egp(),Text,Pos,Size,SizeV2,Align)} #Cost 1 egpID.
    
    function egpBlackText(ID,   ParentID,Text:string,Pos:vector2,Size){egpWhiteText(ID,ParentID,Text,Pos,Size) Screen:egpColor(ID,vec()) } #Cost 1 egpID.
    function appBlackText(EGPID,         Text:string,Pos:vector2){egpBlackText(egp(EGPID),egp(),Text,Pos,10)} #Cost 1 egpID.
    function appBlackText(EGPID,         Text:string,Pos:vector2,Size){egpBlackText(egp(EGPID),egp(),Text,Pos,Size)} #Cost 1 egpID.
    function egpBlackText(ID,   ParentID,Text:string,Pos:vector2,Size,Align){egpBlackText(ID,ParentID,Text,Pos,Size) Screen:egpAlign(ID,Align) } #Cost 1 egpID.
    function appBlackText(EGPID,         Text:string,Pos:vector2,Size,Align){egpBlackText(egp(EGPID),egp(),Text,Pos,Size,Align)} #Cost 1 egpID.
    function appBlackText(EGPID,ParentID,Text:string,Pos:vector2,Size,Align){egpBlackText(egp(EGPID),egp(ParentID),Text,Pos,Size,Align)} #Cost 1 egpID.
    function egpBlackText(ID,   ParentID,Array:array,Pos:vector2,Size){egpWhiteText(ID,ParentID,Array,Pos,Size) Screen:egpColor(ID,vec())} #Cost 1 egpID.
    function appBlackText(EGPID,         Array:array,Pos:vector2,Size){egpBlackText(egp(EGPID),egp(),Array,Pos,Size)} #Cost 1 egpID.
    function appBlackText(EGPID,         Array:array,Pos:vector2){egpBlackText(egp(EGPID),egp(),Array,Pos,10)} #Cost 1 egpID.
    function egpBlackText(ID,   ParentID,Text:string,Pos:vector2,Size,SizeV2:vector2){egpWhiteText(ID,ParentID,Text,Pos,Size,SizeV2) Screen:egpColor(ID,vec())} #Cost 1 egpID.
    function appBlackText(EGPID,         Text:string,Pos:vector2,Size,SizeV2:vector2){egpBlackText(egp(EGPID),egp(),Text,Pos,Size,SizeV2)} #Cost 1 egpID.
    function appBlackText(EGPID,         Text:string,Pos:vector2,SizeV2:vector2){egpBlackText(egp(EGPID),egp(),Text,Pos,10,SizeV2)} #Cost 1 egpID.
    function egpBlackText(ID,   ParentID,Text:string,Pos:vector2,Size,SizeV2:vector2,Align){egpBlackText(ID,ParentID,Text,Pos,Size,SizeV2) Screen:egpAlign(ID,Align)} #Cost 1 egpID.
    function appBlackText(EGPID,         Text:string,Pos:vector2,Size,SizeV2:vector2,Align){egpBlackText(egp(EGPID),egp(),Text,Pos,Size,SizeV2,Align)} #Cost 1 egpID.
    
    function egpUniText(ID,   ParentID,Text:string,Pos:vector2,Size){egpWhiteText(ID,ParentID,Text,Pos,Size) Screen:egpColor(ID,egpUniColor(ParentID)) } #Cost 1 egpID.
    function appUniText(EGPID,         Text:string,Pos:vector2){egpUniText(egp(EGPID),egp(),Text,Pos,10)} #Cost 1 egpID.
    function appUniText(EGPID,         Text:string,Pos:vector2,Size){egpUniText(egp(EGPID),egp(),Text,Pos,Size)} #Cost 1 egpID.
    function egpUniText(ID,   ParentID,Text:string,Pos:vector2,Size,Align){egpUniText(ID,ParentID,Text,Pos,Size) Screen:egpAlign(ID,Align) } #Cost 1 egpID.
    function appUniText(EGPID,         Text:string,Pos:vector2,Size,Align){egpUniText(egp(EGPID),egp(),Text,Pos,Size,Align)} #Cost 1 egpID.
    function appUniText(EGPID,ParentID,Text:string,Pos:vector2,Size,Align){egpUniText(egp(EGPID),egp(ParentID),Text,Pos,Size,Align)} #Cost 1 egpID.
    function egpUniText(ID,   ParentID,Array:array,Pos:vector2,Size){egpWhiteText(ID,ParentID,Array,Pos,Size) Screen:egpColor(ID,egpUniColor(ParentID))} #Cost 1 egpID.
    function appUniText(EGPID,         Array:array,Pos:vector2,Size){egpUniText(egp(EGPID),egp(),Array,Pos,Size)} #Cost 1 egpID.
    function appUniText(EGPID,         Array:array,Pos:vector2){egpUniText(egp(EGPID),egp(),Array,Pos,10)} #Cost 1 egpID.
    function egpUniText(ID,   ParentID,Text:string,Pos:vector2,Size,SizeV2:vector2){egpWhiteText(ID,ParentID,Text,Pos,Size,SizeV2) Screen:egpColor(ID,egpUniColor(ParentID))} #Cost 1 egpID.
    function appUniText(EGPID,         Text:string,Pos:vector2,Size,SizeV2:vector2){egpUniText(egp(EGPID),egp(),Text,Pos,Size,SizeV2)} #Cost 1 egpID.
    function appUniText(EGPID,         Text:string,Pos:vector2,SizeV2:vector2){egpUniText(egp(EGPID),egp(),Text,Pos,10,SizeV2)} #Cost 1 egpID.
    function egpUniText(ID,   ParentID,Text:string,Pos:vector2,Size,SizeV2:vector2,Align){egpUniText(ID,ParentID,Text,Pos,Size,SizeV2) Screen:egpAlign(ID,Align)} #Cost 1 egpID.
    function appUniText(EGPID,         Text:string,Pos:vector2,Size,SizeV2:vector2,Align){egpUniText(egp(EGPID),egp(),Text,Pos,Size,SizeV2,Align)} #Cost 1 egpID.
    
    function appEditTextChangeString(EGPID,VarName:string){
        SysTextEnable=egp(EGPID)
        SysTextLine=0
        SysText=appS(VarName)
    }
    
    function appEditTextChangeNumber(EGPID,VarName:string){
        SysTextEnable=egp(EGPID)
        SysTextLine=0
        SysText=appN(VarName):toString()
    }
    
    function number appEditTextString(EGPID,VarName:string,Pos:vector2,Size){ #Cost 3 egpID.
        local EGP=egp(EGPID)
        local TextSize=textSizeX(10)
        if(!Screen:egpHasObject(EGP)){
            appBox(EGPID,Pos,vec2(Size,15),vec(255))
            appBoxOutline(EGPID+1,EGPID,vec2(),vec2(Size,15),vec(180))
            appBlackText(EGPID+2,EGPID,appS(VarName):right(Size/TextSize),vec2(-Size+5,-10)/2,10,0)
            Screen:egpFont(EGP+2,"Courier New")
        }else{
        if(appClick()&egpInrange(EGP)){appEditTextChangeString(EGPID,VarName)}
        if(SysTextEnable==EGP){
            Screen:egpColor(EGP+1,ROM["System",table]["Theme",vector])
            if(changed(Keyboard)){
                if(Keyboard==19&SysTextLine<SysText:length()){SysTextLine++} 
                if(Keyboard==20&SysTextLine>0){SysTextLine--}
                if(Keyboard==13){sound("Click") return 1}
            }
            appS(VarName,sysText()) 
            local Length=SysText:length()
            local FieldLength=int(Size/TextSize)
            local OffSet=0
            if(!inrange(SysTextLine,0,FieldLength)){OffSet=clamp(SysTextLine-int(FieldLength/2),0,Length-FieldLength)}
            Screen:egpSetText(EGP+2,(SysText:sub(1,Length-SysTextLine)+((date()["sec",number]%2) ? "|" : " ")+SysText:sub(Length-SysTextLine+1,Length)):sub(Length+1-OffSet-clamp(Length+1,0,FieldLength),Length+1-OffSet))
        }
        elseif(SysTextEnableChanged){
            Screen:egpSetText(EGP+2,appS(VarName):right(Size/TextSize))
            Screen:egpColor(EGP+1,vec(180))
        }
    } return 0}
    
    function number appEditTextNumber(EGPID,VarName:string,Pos:vector2,Size){ #Cost 3 egpID.
        local EGP=egp(EGPID)
        local TextSize=textSizeX(10)
        if(!Screen:egpHasObject(EGP)){
            appBox(EGPID,Pos,vec2(Size,15),vec(255,255,255))
            appBoxOutline(EGPID+1,EGPID,vec2(),vec2(Size,15),vec(180))
            appBlackText(EGPID+2,EGPID,appN(VarName):toString():right(Size/TextSize),vec2(-Size+5,-10)/2,10,0)
            Screen:egpFont(EGP+2,"Courier New")
        }else{
        if(appClick()&egpInrange(EGP)){appEditTextChangeNumber(EGPID,VarName)}
        if(SysTextEnable==EGP){
            Screen:egpColor(EGP+1,ROM["System",table]["Theme",vector])
            if(changed(Keyboard)){
                if(Keyboard==19&SysTextLine<SysText:length()){SysTextLine++}
                if(Keyboard==20&SysTextLine>0){SysTextLine--}
                if(Keyboard==13){sound("Click") return 1}
            }
            appN(VarName,sysText():toNumber()) 
            local Length=SysText:length()
            local FieldLength=int(Size/TextSize)
            local OffSet=0
            if(!inrange(SysTextLine,0,FieldLength)){OffSet=clamp(SysTextLine-int(FieldLength/2),0,Length-FieldLength)}
            Screen:egpSetText(EGP+2,(SysText:sub(1,Length-SysTextLine)+((date()["sec",number]%2) ? "|" : " ")+SysText:sub(Length-SysTextLine+1,Length)):sub(Length+1-OffSet-clamp(Length+1,0,FieldLength),Length+1-OffSet))
        }
        elseif(SysTextEnableChanged){
            Screen:egpSetText(EGP+2,appN(VarName):toString():right(Size/TextSize))
            Screen:egpColor(EGP+1,vec(180))
        }
    } return 0}
    
    function number appButton(EGPID,Text:string,Pos:vector2,Size:vector2,Color:vector,Event){ #Cost 3 egpID.
        local EGP = egp(EGPID)
        if(!Screen:egpHasObject(EGP)){
            appBox(EGPID,Pos,Size,Color)
            appBoxOutline(EGPID+1,EGPID,vec2(),Size,Color*0.7)
            appUniText(EGPID+2,EGPID,Text,vec2(0,-Size:y()/4),Size:y()/2,1) }else{
        if(egpInrange(EGP)){Screen:egpColor(EGP,(array(Color:x(),Color:y(),Color:z()):average()<70) ? Color+vec(50) : Color*0.7) return Event}else{Screen:egpColor(EGP,Color)}
    } return 0}
    function number appButtonPress(EGPID,Text:string,Pos:vector2,Size:vector2,Color:vector){return appButton(EGPID,Text,Pos,Size,Color,appMouse())} #Cost 3 egpID.
    function number appButtonPress(EGPID,Text:string,Pos:vector2,Size:vector2){return appButtonPress(EGPID,Text,Pos,Size,ROM["System",table]["Theme",vector])} #Cost 3 egpID.    
    function number appButton(EGPID,Text:string,Pos:vector2,Size:vector2,Color:vector){return appButton(EGPID,Text,Pos,Size,Color,appClick())} #Cost 3 egpID.
    function number appButton(EGPID,Text:string,Pos:vector2,Size:vector2){return appButton(EGPID,Text,Pos,Size,ROM["System",table]["Theme",vector])} #Cost 3 egpID.
    
    function number appButtonToggle(EGPID,VarName:string,Pos:vector2,Size:vector2,Color:vector,Text:array){ #Cost 3 egpID.
        local EGP = egp(EGPID)
        if(!Screen:egpHasObject(EGP)){
            appBox(EGPID,Pos,Size,Color)
            appBoxOutline(EGPID+1,EGPID,vec2(),Size,Color*0.7)
            appUniText(EGPID+2,EGPID,Text[appN(VarName)+1,string],vec2(0,-Size:y()/4),Size:y()/2,1) }else{
        if(egpInrange(EGP)){
            Screen:egpColor(EGP,(array(Color:x(),Color:y(),Color:z()):average()<70) ? Color+vec(50) : Color*0.7)
            if(appClick()){
                appN(VarName,(appN(VarName)+1)%(Text:count()))
                Screen:egpSetText(EGP+2,Text[appN(VarName)+1,string]) return 1} }
        else{Screen:egpColor(EGP,Color)}
    } return 0}
    
    function number appButtonToggle(EGPID,VarName:string,Pos:vector2,Size:vector2,Text:array){return appButtonToggle(EGPID,VarName,Pos,Size,ROM["System",table]["Theme",vector],Text)} #Cost 3 egpID.
    
    function number appCheckBox(EGPID,VarName:string,Text:string,Pos:vector2){ #Cost 4 egpID
        local EGP = egp(EGPID)
        if(!Screen:egpHasObject(EGP)){
            appBox(EGPID,Pos+vec2(8),vec2(16),vec(255))
            appBoxOutline(EGPID+1,EGPID,vec2(),vec2(16),vec(180))
            appUniText(EGPID+2,Text,Pos+vec2(20,3))
            Screen:egpLineStrip(EGP+3,vec2(-6,0),vec2(0,6),vec2(9,-10)) Screen:egpColor(EGP+3,vec4(128,255,0,255*appN(VarName))) Screen:egpParent(EGP+3,EGP) Screen:egpSize(EGP+3,3) 
        }else{
        if(egpInrange(EGP)){
            if(appClick()){
                appN(VarName,!appN(VarName))
                Screen:egpAlpha(EGP+3,255*appN(VarName))
                return 1
            }
            Screen:egpColor(EGP,vec(200))
        }else{
            Screen:egpColor(EGP,vec(255))
        }
    } return 0}
    
    function number appScroller(EGPID,VarName:string,Pos:vector2,Size:vector2,ArraySize,FieldSize){ #Cost 2 egpID
        FieldSize=int(FieldSize)
        if(Size:y()<Size:x()){
            #Horizontal
            if(!Screen:egpHasObject(egp(EGPID))){
                appBox(EGPID,Pos,Size,vec(150)) Screen:egpAlpha(egp(EGPID),150)
                appBox(EGPID+1,EGPID,vec2(-Size:y()/2+10,0),vec2(20,Size:y()),vec(150)) 
            }elseif(appMouse()&egpInrange(egp(EGPID))&FieldSize<ArraySize){
                local SizeScroll=Size-vec2(20,0)
                Screen:egpPos(egp(EGPID+1),vec2(clamp((CursorPos-Screen:egpPos(egp())-Pos+Size/2-vec2(Size:x()/2,0)):x(),-SizeScroll:x()/2,SizeScroll:x()/2),0))
                appN(VarName,clamp((SizeScroll:x()/10<ArraySize)*floor((CursorPos-Pos+SizeScroll/2-Screen:egpPos(egp()))/SizeScroll*(ArraySize-FieldSize)):x(),0,ArraySize-FieldSize))
                return 1
            }
        }else{
            #Vertical
            if(!Screen:egpHasObject(egp(EGPID))){
                appBox(EGPID,Pos,Size,vec(150)) Screen:egpAlpha(egp(EGPID),150)
                appBox(EGPID+1,EGPID,vec2(0,-Size:y()/2+10),vec2(Size:x(),20),vec(150)) 
            }elseif(appMouse()&egpInrange(egp(EGPID))&FieldSize<ArraySize){
                local SizeScroll=Size-vec2(0,20)
                Screen:egpPos(egp(EGPID+1),vec2(0,clamp((CursorPos-Screen:egpPos(egp())-Pos+Size/2-vec2(0,Size:y()/2)):y(),-SizeScroll:y()/2,SizeScroll:y()/2)))
                appN(VarName,clamp((FieldSize<ArraySize)*floor((CursorPos-Pos+SizeScroll/2-Screen:egpPos(egp()))/SizeScroll*(ArraySize-FieldSize)):y(),0,ArraySize-FieldSize))
                return 1
            }
        }
        if(FieldSize>ArraySize&appN(VarName)!=0){appN(VarName,0)}
    return 0 }
    
    function number appSliderStatic(EGPID,VarName:string,Pos:vector2,Size,Min,Max){ #Cost 3 egpID
        if(!Screen:egpHasObject(egp(EGPID))){
            Screen:egpLine(egp(EGPID),Pos,Pos+vec2(Size,0)) Screen:egpColor(egp(EGPID),egpUniColor(egp())) Screen:egpSize(egp(EGPID),3) Screen:egpParent(egp(EGPID),egp())
            appBox(EGPID+1,Pos+vec2((appN(VarName)-Min)*Size/(Max-Min),0),vec2(6,8),ROM["System",table]["Theme",vector])
            appUniText(EGPID+2,appN(VarName):toString(),Pos+vec2(Size+4,-6),8) }else{
        if(appMouse()&egpAppInrange(Pos-vec2(2,4),Pos+vec2(Size+2,4))){
            appN(VarName,clamp(int((CursorPos-Screen:egpPos(egp())-Pos):x()*(Max-Min)/Size+Min),Min,Max))
            Screen:egpPos(egp(EGPID+1),Pos+vec2((appN(VarName)-Min)*Size/(Max-Min),0))
            Screen:egpSetText(egp(EGPID+2),appN(VarName):toString()) return 1}} return 0}
    
    function number appSliderDynamic(EGPID,VarName:string,Pos:vector2,Size,Min,Max){
        Screen:egpPos(egp(EGPID+1),Pos+vec2((appN(VarName)-Min)*Size/(Max-Min),0))
        Screen:egpSetText(egp(EGPID+2),appN(VarName):toString())
        return appSliderStatic(EGPID,VarName,Pos,Size,Min,Max) } #Cost 3 egpID
    
    function number appChoiceMenu(EGPID,Pos:vector2,Color:vector,VarName:string,ChooseText:array){ #Cost 3 egpID.
        if(!Screen:egpHasObject(egp(EGPID))){
            appBox(EGPID,Pos+vec2(40,7.5+appN(VarName+"List")*15),vec2(80,15),Color)
            local ChooseText1=array() local ChooseText2=array()
            foreach(I,N:string=ChooseText){if(I%2){ChooseText1:pushString(N)}else{ChooseText2:pushString(N)}}
            appUniText(EGPID+1,ChooseText1:concat("\n\n\n"):explode("\n"),Pos+vec2(3,2.5),10)
            appUniText(EGPID+2,ChooseText2:concat("\n\n\n"):explode("\n"),Pos+vec2(3,17.5),10)
            if(appS(VarName)!=ChooseText[appN(VarName+"List"),string]){foreach(I,N:string=ChooseText){if(appS(VarName)==N){appN(VarName+"List",I-1) Screen:egpPos(egp(EGPID),Pos+vec2(40,7.5+appN(VarName+"List")*15)) break}}}
            if(!appS(VarName)){appS(VarName,ChooseText[appN(VarName+"List")+1,string])} return 1 
        }
        elseif(egpAppInrange(Pos,Pos+vec2(80,ChooseText:count()*15))&appMouse()){
            appN(VarName+"List",appChoiceHelper(Pos,15):y())
            Screen:egpPos(egp(EGPID),Pos+vec2(40,7.5+appN(VarName+"List")*15))
            appS(VarName,ChooseText[appN(VarName+"List")+1,string])
            return changed(appN(VarName+"List"))
        }
    return 0 }
    
    function number appChoiceMenu(EGPID,Pos:vector2,VarName:string,ChooseText:array){return appChoiceMenu(EGPID,Pos,ROM["System",table]["Theme",vector],VarName,ChooseText)} #Cost 3 egpID.
    
    function number appContextMenu(VarName:string,Reason,Chooses:array){ #Cost 0 egpID
        local EGP=AppEGPID["FreeEGP",array][1,vector2][2]
        local Size=vec2(80,Chooses:count()*10)
        if(Reason&!Screen:egpHasObject(EGP)){
            ContextMenu=ThisApp+" "+VarName
            Screen:egpBox(EGP,CursorPos+vec2(3)+Size/2,Size+vec2(6)) Screen:egpColor(EGP,vec(245))
            egpAdvBox(EGP-1,EGP,vec2(),vec2(80,10),ROM["System",table]["Theme",vector])
            egpBlackText(EGP-2,EGP,Chooses,vec2(3,0)-Size/2,10)
            egpAdvBoxOutline(EGP-3,EGP,vec2(),Size+vec2(6),vec(215))
        }
        elseif(ContextMenu==(ThisApp+" "+VarName)){
            if(inrange(CursorPos,Screen:egpPos(EGP)-Size/2,Screen:egpPos(EGP)+Size/2)){
                Screen:egpPos(EGP-1,vec2(0,choiceHelper(Screen:egpPos(EGP)-Size/2,10):y()*10-Size:y()/2+5)) Screen:egpAlpha(EGP-1,255)
                if(appClick()){appN(VarName,choiceHelper(Screen:egpPos(EGP)-Size/2,10):y()+1)}
            }else{Screen:egpAlpha(EGP-1,0)}
            if(appClick()){for(I=EGP-3,EGP){Screen:egpRemove(I)} ContextMenu="" }
        }
        elseif(appClick()){for(I=EGP-3,EGP){Screen:egpRemove(I)} ContextMenu="" }
    return Screen:egpHasObject(EGP) }
    
    function appArrayField(EGPID,VarName:string,Pos:vector2,Size:vector2,Array:array){ #Cost 4 egpID
        local EGP = egp(EGPID)
        if(!Screen:egpHasObject(EGP)){ # 1 tick of rendering
            appBox(EGPID,Pos,Size,vec(255))
            appBlackText(EGPID+1,Array:concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):explode("\n"),vec2(2,0)-Size/2+Pos,10) 
            Screen:egpFont(EGP+1,"Courier New") Screen:egpSize(EGP+1,vec2(Resolution:x(),Size:y()))
            appScroller(EGPID+2,VarName+"List",Pos+vec2(Size:x()/2-5,0),vec2(10,Size:y()),0,0)
        }else{
        if(appScroller(EGPID+2,VarName+"List",Pos+vec2(Size:x()/2-5,0),vec2(10,Size:y()),Array:count(),Size:y()/10)){Screen:egpSetText(EGP+1,Array:concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):replace("nil",""))}
        if(Update==(ThisApp+" "+VarName)){Screen:egpSetText(EGP+1,Array:concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):replace("nil","")) Update=""}
    }}
    
    function appArrayFieldShort(EGPID,VarName:string,Pos:vector2,Size:vector2,Array:array){ #Cost 4 egpID
        local EGP = egp(EGPID)
        if(!Screen:egpHasObject(EGP)){
            appBox(EGPID,Pos,Size,vec(255))
            if(AppResize!=ThisApp){appR(VarName+"Array",Array:shortArray(Size:x()/textSizeX(10)))}
            appBlackText(EGPID+1,appR(VarName+"Array"):concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):replace("nil",""):explode("\n"),vec2(2,0)-Size/2+Pos,10) 
            Screen:egpFont(EGP+1,"Courier New") Screen:egpSize(EGP+1,vec2(Resolution:x(),Size:y()))
            appScroller(EGPID+2,VarName+"List",Pos+vec2(Size:x()/2-5,0),vec2(10,Size:y()),0,0)
        }else{
        if(appScroller(EGPID+2,VarName+"List",Pos+vec2(Size:x()/2-5,0),vec2(10,Size:y()),appR(VarName+"Array"):count(),Size:y()/10)){
            Screen:egpSetText(EGP+1,appR(VarName+"Array"):concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):replace("nil","")) }
        if(Update==(ThisApp+" "+VarName)){appR(VarName+"Array",Array:shortArray(Size:x()/textSizeX(10))) Screen:egpSetText(EGP+1,appR(VarName+"Array"):concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):replace("nil","")) Update="" }
    }}
    
    function appArrayFieldCut(EGPID,VarName:string,Pos:vector2,Size:vector2,Array:array){ #Cost 4 egpID
        local EGP = egp(EGPID)
        if(!Screen:egpHasObject(EGP)){
            appBox(EGPID,Pos,Size,vec(255))
            appBlackText(EGPID+1,Array:concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):explode("\n"):cutArray(Size:x()/textSizeX(10)),vec2(2,0)-Size/2+Pos,10) 
            Screen:egpFont(EGP+1,"Courier New") Screen:egpSize(EGP+1,vec2(Resolution:x(),Size:y()))
            appScroller(EGPID+2,VarName+"List",Pos+vec2(Size:x()/2-5,0),vec2(10,Size:y()),0,0)
        }else{
        if(appScroller(EGPID+2,VarName+"List",Pos+vec2(Size:x()/2-5,0),vec2(10,Size:y()),Array:count(),Size:y()/10)){
            Screen:egpSetText(EGP+1,Array:concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):explode("\n"):cutArray(Size:x()/textSizeX(10)):concat("\n"):replace("nil","") ) }
        if(Update==(ThisApp+" "+VarName)){Screen:egpSetText(EGP+1,Array:concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):explode("\n"):cutArray(Size:x()/textSizeX(10)):concat("\n"):replace("nil","")) Update="" }
    }}
    
    function appArrayFieldUse(EGPID,VarName:string,Pos:vector2,Size:vector2,Array:array){ #Cost 5 egpID
        local EGP = egp(EGPID)
        if(!Screen:egpHasObject(EGP)){
            appBox(EGPID,Pos,Size,vec(255))
            appBox(EGPID+4,Pos+vec2(-5,10*(appN(VarName)-appN(VarName+"List"))-40),vec2(Size:x()-10,10),ROM["System",table]["Theme",vector]) Screen:egpAlpha(EGP+4,0)
            appBlackText(EGPID+1,Array:concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):replace("nil",""):explode("\n"),vec2(2,0)-Size/2+Pos,10) 
            Screen:egpFont(EGP+1,"Courier New") Screen:egpSize(EGP+1,vec2(Resolution:x(),Size:y()))
            appScroller(EGPID+2,VarName+"List",Pos+vec2(Size:x()/2-5,0),vec2(10,Size:y()),0,0)
        }else{
        if(appScroller(EGPID+2,VarName+"List",Pos+vec2(Size:x()/2-5,0),vec2(10,Size:y()),Array:count(),Size:y()/10)){
            Screen:egpSetText(EGP+1,Array:concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):replace("nil",""))
            if(inrange((appN(VarName)-int(appN(VarName+"List"))),1,Size:y()/10)){
                Screen:egpPos(EGP+4,Pos+vec2(-5,10*(appN(VarName)-int(appN(VarName+"List")))-Size:y()/2-5)) } }
        if(!appN(VarName+"Ignore")&egpAppInrange(-Size/2+Pos,vec2(-10,0)+Size/2+Pos)){
            if(appMouse()){
                Screen:egpPos(EGP+4,Pos+vec2(-5,10*(appChoiceHelper(Pos-Size/2,10):y()+1+appN(VarName+"List")-appN(VarName+"List"))-Size:y()/2-5)) Screen:egpAlpha(EGP+4,255) }
            if(appClick()){
                appN(VarName,appChoiceHelper(Pos-Size/2,10):y()+1+appN(VarName+"List")) } }
        if(Update==(ThisApp+" "+VarName)){Screen:egpSetText(EGP+1,Array:concat("\n",appN(VarName+"List")+1,appN(VarName+"List")+Size:y()/10):replace("nil","")) Update=""}
    }}
    
    function appArrayFieldUseCTM(EGPID,VarName:string,Pos:vector2,Size:vector2,Array:array,ContextMenu:array){ #Cost 5 egpID
        appArrayFieldUse(EGPID,VarName,Pos,Size,Array)
        if(appContextMenu(VarName+"Action",appClick()&egpAppInrange(-Size/2+Pos,vec2(-10,0)+Size/2+Pos),ContextMenu)){appN(VarName+"Ignore",1)}
        elseif(appN(VarName+"Ignore")){appN(VarName+"Ignore",0)} 
    }
    
    #Activity
    function number activityManager(VarName:string,EGPIDStart,EGPIDEnd){
        if(!Screen:egpHasObject(egp(EGPIDStart))){appN(VarName+"Update",1)}
        if(appS(VarName+"Changed")!=appS(VarName)){
            for(I=egp(EGPIDStart),egp(EGPIDEnd)){Screen:egpRemove(I)}
            appN(VarName+"Update",1)
            appS(VarName+"Changed",appS(VarName))
            return 0
        }
        return 1
    }
    
    function number activityManager(EGPIDStart,EGPIDEnd){return activityManager("Activity",EGPIDStart,EGPIDEnd)}
    function number activityManager(EGPIDStart){return activityManager("Activity",EGPIDStart,AppEGPID[ThisApp,vector2]:y())}
    
    function number activityGraphics(VarName:string){if(appN(VarName+"Update")){appN(VarName+"Update",0) return 1} return 0}
    function number activityGraphics(){return activityGraphics("Activity")}
    
    function number activityCreate(VarName:string){if(!appN(VarName+"Create"+appS(VarName))){appN(VarName+"Create"+appS(VarName),1) return 1} return 0}
    function number activityCreate(){return activityCreate("Activity")}
    
    #App functions
    function callAppPlus(Number){foreach(I,N:number=AppPos){AppPos[I,number]=N+Number}}
    function callAppPosPlus(AppName:string,Number){local AppPosFlip=AppPos:flip() for(I=1,AppPos[AppName,number]-1){AppPos[AppPosFlip[I,string],number]=AppPos[AppPosFlip[I,string],number]+1}}
    function callAppPosMinus(AppName:string,Number){local AppPosFlip=AppPos:flip() for(I=AppPos[AppName,number]+1,AppPos:count()){AppPos[AppPosFlip[I,string],number]=AppPos[AppPosFlip[I,string],number]-1}}
            
    function callApp(AppName:string){
        local AppPosFlip=AppPos:flip()
        callAppPosPlus(AppName,1)
        AppPos[AppName,number]=1
        CallAppEvent=AppName
    }
    
    function appLaunchT(AppName:string){
        if(!App[AppName,table]){
            AppLaunch=AppName
            App[AppName,table]=table()
            glbV2(AppName,"Pos",Resolution/2)
            #App pos
            callAppPlus(1)
            AppPos[AppName,number]=1}
        elseif(AppPos[AppName,number]>1){
            callApp(AppName)
        } 
    }
    function appLaunch(AppName:string){if(AllApps[AppName,vector]){appLaunchT(AppName)}}
    
    function appLaunchT(AppName:string,Activity:string){appLaunchT(AppName) glbS(AppName,"Activity",Activity)}
    function appLaunch(AppName:string,Activity:string){appLaunch(AppName) glbS(AppName,"Activity",Activity)}
    
    function number appStart(AppName:string,Size:vector2,Color:vector,EGPCount){
        #App color of icon
        if(!AllApps[AppName,vector]){AllApps[AppName,vector]=Color}
        #Stop app
        if(App[AppName,table]){
            ThisApp=AppName
            Opcounter=opcounter()
            if(AppLaunch==AppName){
                for(I=2,AppEGPID["FreeEGP",array]:count()){
                    local FreeEGPIDV2=AppEGPID["FreeEGP",array][I,vector2]
                    if(FreeEGPIDV2:y()>=EGPCount){
                        AppEGPID[AppName,vector2]=vec2(FreeEGPIDV2:x(),EGPCount)
                        AppEGPID["FreeEGP",array][I,vector2]=FreeEGPIDV2=vec2(AppEGPID[AppName,vector2]:x()+EGPCount,FreeEGPIDV2:y()-EGPCount)
                        if(FreeEGPIDV2:y()==0){AppEGPID["FreeEGP",array]:remove(I)}
                        NoNewMemory=1 break
                    }
                }
                if(!NoNewMemory){
                    local FreeEGP=AppEGPID["FreeEGP",array][1,vector2]:x()
                    AppEGPID[AppName,vector2]=vec2(FreeEGP,EGPCount)
                    AppEGPID["FreeEGP",array][1,vector2][1]=FreeEGP+EGPCount+5
                }
                sound("Open")
                appV2("WinMovePos",vec2(0,Size:y()/2-7))
                AppCreate=AppLaunch AppLaunch=""
            }
            
            #Draw window
            if(appV2("Size")!=vec2()){Size=appV2("Size")}
            
            local EGP = egp()
            local EGPPos=Screen:egpPos(EGP)
            if(!Screen:egpHasObject(EGP)){
                Screen:egpBox(EGP,appV2("Pos"),Size) Screen:egpColor(EGP,Color)
                appUniText(-1,AppName,vec2(0,-Size:y()/2+1),10,1)
                appBox(-2,Size*vec2(0.5,-0.5)+vec2(-7,7),vec2(14,14),vec(255,0,0)) 
                Screen:egpLineStrip(EGP-3,array(vec2(-4,-4),vec2(4,4),vec2(),vec2(4,-4),vec2(-4,4))) Screen:egpParent(EGP-3,EGP-2) Screen:egpColor(EGP-3,egpUniColor(EGP))
                appBoxOutline(-4,vec2(),Size+Resolution/256,Color*0.7)
                AppGraphics=AppName
            }else{
            
            #Inrange window
            if(AppTimerClk){
                local AppPosFlip=AppPos:flip():toArray()
                local Inrange=0
                if(AppResize==ThisApp){Inrange=1}else{Inrange=inrange(CursorPos,EGPPos-Size/2,EGPPos+Size/2)}
                appN("Inrange",Inrange)
                if(Mouse1&Inrange&!glbN(AppPosFlip[1,string],"Inrange")){
                    local InrangeCount = 0
                    local AppPosCount = AppPos:count()
                    foreach(I,N:string=AppPosFlip){
                        if(!glbN(N,"Inrange")){InrangeCount++}
                        if(InrangeCount==AppPos[ThisApp,number]-1){callApp(ThisApp) break}
                    }
                }
            }
                
            #Close button animation
            if(egpInrange(EGP-2)){if(appClick()){AppClose=ThisApp} Screen:egpAlpha(EGP-2,255)}else{Screen:egpAlpha(EGP-2,0)}
            
            #Move window
            if(appV2("Size")!=vec2()){WinMoveInrange=inrange(CursorPos,EGPPos-Size/2,EGPPos+vec2(Size:x()/2-45,-Size:y()/2+15))}
            else{WinMoveInrange=inrange(CursorPos,EGPPos-Size/2,EGPPos+vec2(Size:x()/2-15,-Size:y()/2+15))}
            
            if(ChangedMouse1&appMouse()&WinMoveInrange){appV2("WinMovePos",EGPPos-CursorPos)}
            if(appMouse()&(AppMove==ThisApp|WinMoveInrange)){
                AppMove=ThisApp
                appN("Inrange",1)
                Screen:egpPos(EGP,appV2("WinMovePos")+CursorPos)
            }
            if(AppMove==ThisApp&!Mouse1){appV2("WinMovePos",vec2(0,Size:y()/2-7)) appV2("Pos",EGPPos) AppMove=""}
            
            } return ((AppPos[ThisApp,number]==1&!clk())|threadClk())&(AppPos[ThisApp,number]==1|perf(99))
        }
        return 0 
    }
    
    function number appEnd(){
        local EGPIDPos=AppEGPID[ThisApp,vector2]:x()
        local EGPCount=AppEGPID[ThisApp,vector2]:y()
        
        #Close window
        if(AppClose==ThisApp){
            if(ThisApp!="StartMenu"){sound("Close")}
            SysTextEnable=0 ChangedMouse1=0
            for(I=egp(-4),egp(EGPCount)){Screen:egpRemove(I)}
            if(EGPIDPos+EGPCount+5==AppEGPID["FreeEGP",array][1,vector2]:x()){
                AppEGPID["FreeEGP",array][1,vector2][1]=EGPIDPos
            }else{
                AppEGPID["FreeEGP",array]:pushVector2(AppEGPID[ThisApp,vector2])
            }
            callAppPosMinus(ThisApp,-1)
            App:remove(ThisApp) AppPos:remove(ThisApp) AppEGPID:remove(ThisApp)
            
            if(!App:count()){AppEGPID["FreeEGP",array]=array(vec2(ROM["System",table]["FullLoad",number] ? StartEGPID+4 : 5,egpMaxObjects()))}
            
            SysTextEnable=0 AppClose="" ThisApp="" return 1
        }
        
        #Update window
        if(CallAppEvent==ThisApp){
            for(I=egp(-4),egp(EGPCount)){Screen:egpRemove(I)} 
            SysTextEnable=0 CallAppEvent=""
        }
        
        appN("Opcounter",opcounter()-Opcounter)
        ThisApp="" return 0
    }
    
    function number thread(AppName:string,AddEvent){
        if(App[AppName,table]&(AddEvent|threadClk())){
            ThisApp=AppName
            return 1
        }
        return 0
    }
    
    function number thread(AppName:string){return thread(AppName,0)}
    
    function number appEndSave(){if(AppClose==ThisApp){romSaveApp(ThisApp)} return appEnd()}
    
    function number appCreate(){if(AppCreate==ThisApp){AppCreate="" return 1} return 0}
    
    function number appGraphics(){if(AppGraphics==ThisApp){AppGraphics="" return 1} return 0}
    function appSizeUpdate(){
        local EGP = egp()
        local Size = appV2("Size")
        Screen:egpPos(EGP,appV2("Pos")) 
        Screen:egpSize(EGP,Size) 
        Screen:egpPos(EGP-1,vec2(0,-Size:y()/2+1))
        Screen:egpRemove(EGP-2) appBox(-2,vec2(Size:x()/2-7,-Size:y()/2+7),vec2(14,14),vec(255,0,0)) Screen:egpAlpha(EGP-2,0)
        Screen:egpSize(EGP-4,Size+Resolution/256)
    }
    
    function number appSize(EGPID,MinSize:vector2,StandartSize:vector2,Color:vector){ #Cost 2 egpID
        if(appV2("Size")==vec2()){appV2("Size",StandartSize)}
        local EGP = egp()
        local EGP2 = EGP+EGPID
        if(!Screen:egpHasObject(EGP2)){
            appBox(EGPID,Screen:egpSize(EGP)*vec2(0.5,-0.5)+vec2(-21,7),vec2(14),vec(255,0,0)) 
            appBoxOutline(EGPID+1,EGPID,vec2(),vec2(8),egpUniColor(EGP))
            appN("SizeDelay",2)
        }elseif(appN("SizeDelay")==1){
            Screen:egpLine(EGP2+2,Screen:egpSize(EGP)/2+vec2(-10,-2),Screen:egpSize(EGP)/2+vec2(-2,-10)) Screen:egpColor(EGP2+2,Color) Screen:egpParent(EGP2+2,EGP) 
        }elseif(appN("SizeDelay")>0){appN("SizeDelay",appN("SizeDelay")-1)}
        
        if(egpInrange(EGP2)){
            if(appClick()){
                local ResolutionUniversal=(FullLoad ? Resolution-vec2(0,16) : Resolution)
                if(appV2("Size")==ResolutionUniversal){appV2("Size",StandartSize)}else{appV2("Size",ResolutionUniversal) appV2("Pos",ResolutionUniversal/2)}
                appSizeUpdate()
                Screen:egpRemove(EGP2) appBox(EGPID,Screen:egpSize(EGP)*vec2(0.5,-0.5)+vec2(-21,7),vec2(14),vec(255,0,0))  Screen:egpAlpha(EGP2,0)
                Screen:egpLine(EGP2+2,Screen:egpSize(EGP)/2+vec2(-10,-2),Screen:egpSize(EGP)/2+vec2(-2,-10))
                ChangedMouse1=0 return 1 
            }
            Screen:egpAlpha(EGP2,255)
        }else{Screen:egpAlpha(EGP2,0)}
        
        if(appMouse()&(AppResize==ThisApp|egpAppInrange(Screen:egpSize(EGP)/2-vec2(5),Screen:egpSize(EGP)/2+vec2(5)))){
            AppResize=ThisApp appN("Inrange",1)
            appV2("Pos",clamp((Screen:egpPos(EGP)-Screen:egpSize(EGP)/2+CursorPos)/2,Screen:egpPos(EGP)+(MinSize-Screen:egpSize(EGP))/2,Resolution))
            appV2("Size",clamp((CursorPos-appV2("Pos"))*2,MinSize,Resolution))
            Screen:egpPos(EGP,appV2("Pos"))
            appSizeUpdate()
            Screen:egpRemove(EGP2) appBox(EGPID,Screen:egpSize(EGP)*vec2(0.5,-0.5)+vec2(-21,7),vec2(14),vec(255,0,0)) Screen:egpAlpha(EGP2,0)
            Screen:egpLine(EGP2+2,Screen:egpSize(EGP)/2+vec2(-10,-2),Screen:egpSize(EGP)/2+vec2(-2,-10))
            return 1
        }
        
        if(AppResize==ThisApp&!Mouse1){
            appV2("Pos",clamp(appV2("Pos"),appV2("Size")*vec2(0,0.5),Resolution+appV2("Size")*vec2(0,0.5))) Screen:egpPos(EGP,appV2("Pos"))
            ChangedMouse1=0
            AppResize=""
        }
    return 0}
    
    function number appSize(EGPID,MinSize:vector2,StandartSize:vector2){return appSize(EGPID,MinSize,StandartSize,egpUniColor(egp()))}
    
    function number dialogApp(Name:string,Type:string,Size,Text:string){if(DialogApp==Name){
        if(!Mouse1&(!App["DialogApp",table]|DialogAppChanged)){appLaunch("DialogApp")
            if(appV2("Pos")!=vec2()){glbV2("DialogApp","Pos",appV2("Pos"))}
            glbS("DialogApp","Text",Text)
            glbS("DialogApp","Type",Type)
            glbN("DialogApp","TextSize",Size)
            switch(Type){
                case "BigNotify", glbV2("DialogApp","AddSize",vec2(0,Text:explode("\n"):shortArray(240/textSizeX(Size)):count()*Size-35)) break
                case "FieldNotify", case "Choose", glbV2("DialogApp","AddSize",vec2(-50,Size)) break  
            } }
        if(glbN("DialogApp","Answear")){AppClose="DialogApp" return 1}
    } return 0}
    
    function startMenuIcon(Number){local AppName=ROM["Apps",table]["StartMenu",table]["IconList",array][Number,string]
        if(egpUniColor(AllApps[AppName,vector])==vec()){StartMenuIconColor=AllApps[AppName,vector]*0.8}else{StartMenuIconColor=AllApps[AppName,vector]}
        appBox(9+Number*3,vec2(-1,-appV2("Size"):y()/2+23)+vec2(40*mod(Number-1,3),40*floor((Number-1)/3)),vec2(38),StartMenuIconColor) 
        egpWhiteText(egp(10+Number*3),egp(9+Number*3),AppName[1],vec2(0,-20),25,1)
        egpWhiteText(egp(11+Number*3),egp(9+Number*3),AppName:sub(1,6)+"\n"+AppName:sub(7,13),vec2(-19,2),6,vec2(40,20),1)
        if(AppName:length()<7){Screen:egpPos(egp(11+Number*3),vec2(-19,5)) } }
    
    function array table:tableCMDtoStringArray(Size){
        local Return=array()
        local Keys=This:keys()
        local Types=This:typeids()
        foreach(I,N:string=Keys){
            switch(Types[N,string]){
                case "n", Value=This[N,number]:toString() break
                case "s", Value=This[N,string] break
                case "v", Value=This[N,vector]:toString() break
                case "xv2", Value=This[N,vector2]:toString() break
                case "xv4", Value=This[N,vector4]:toString() break
                case "e", Value=This[N,entity]:toString() break
                case "a", Value=This[N,angle]:toString() break
                case "r", Value="("+This[N,array]:count()+") ["+This[N,array]:concat(",")+"]" break
                case "t", Value="" break
                default, Value="unknown" break
            }
            Return:pushString((N+" ("+Types[N,string]+") = "+Value):left(Size))
        }
        return Return
    }
    
    
    findIncludeClass("player") findUser()
    timer("SystemOn",1000)
    
    #Windows logo 
    Resolution=autoResolution()
    Screen:egpClear()
    Screen:egpBox(1,Resolution/2,Resolution) Screen:egpColor(1,vec())
    Screen:egpPoly(2,vec2(-40,32),vec2(-40,-32),vec2(46,-44),vec2(46,44)) Screen:egpColor(2,vec(0,220,255))
    Screen:egpBox(3,vec2(),vec2(100,4)) Screen:egpColor(3,vec())
    Screen:egpBox(4,vec2(),vec2(4,100)) Screen:egpColor(4,vec())
    for(I=2,5){Screen:egpParent(I,1)}
    #Set resolution
    Screen:egpResolution(vec2(),Resolution)

}
if(changed(SystemOn)&!SystemOn&!first()){
    Screen:egpClear() Device:egpClear()
}
if(!SystemOn){ #System Off
    if(changed(Screen)){reset()}
    timer("1",1000)
    
    findUser()
    if(find():keyUse()&find():aimEntity()==Screen:entity()){ #Wake up system
        SystemOn=1 Screen:egpLoadFrame("Sleep") 
    }
    
    #Load ROM data
    if(Screen&clk("SystemOn")){
        Screen:egpClear()
        ROM=gTable("Win"+entity():id())
        
        #Set default ROM
        if(ROM["Version",number]!=2.2){
            #Standart values
            ROM["System",table]=table()
                local RandColor = random(360)
                ROM["System",table]["Wallpaper",vector]=floor(hsv2rgb(RandColor,1,0.7))
                ROM["System",table]["Theme",vector]=floor(hsv2rgb(RandColor,0.7,1))
                ROM["System",table]["Resolution",vector2]=autoResolution()
                ROM["System",table]["FullLoad",number]=FullLoad=1
                ROM["System",table]["Control",number]=1
                ROM["System",table]["CreateDate",table]=date()
                ROM["System",table]["NFLStartUp",string]="TaskM"
                ROM["System",table]["SoundEnable",number]=1
            ROM["Version",number]=2.2
            ROM["Apps",table]=table()
                ROM["Apps",table]["StartMenu",table]=table()
                ROM["Apps",table]["StartMenu",table]["LastApps",array]=array("TaskM","Settings","Clicker","TicTacToe","Hluoix3D")
                ROM["Apps",table]["StartMenu",table]["IconList",array]=array("Settings","Clicker","TicTacToe","Hluoix3D","Chat","Diagrams")
        }
        #Launch system
        if(ROM["Version",number]==2.2){
            #Set saved resolution
            Resolution=ROM["System",table]["Resolution",vector2]
            if(Resolution:x()<300|Resolution:y()<150){
                ROM["System",table]["Resolution",vector2]=Resolution=autoResolution()
                DialogApp="Wrong resolution"
            }
            
            #FullLoad
            FullLoad=ROM["System",table]["FullLoad",number]
            if(!FullLoad){appLaunchT(ROM["System",table]["NFLStartUp",string])}
            runSystem(FullLoad ? StartEGPID : 1)
        }
        
        #Set resolution
        Screen:egpResolution(vec2(),Resolution) 
    }


}
else{ #System On
    
    #Timers
    NowThreads=Threads=clamp(Threads,1,6)
    interval(100/Threads)
    Threads=4
    SysTimerNum=AppTimerNum=0
    if(clk()){
        SysTimer++
        AppTimerClk = !mod(SysTimer,NowThreads)
        AppTimer+=AppTimerClk
    }
    
    #Mouse
    if(appTimer(1000)){findUser()}
    CursorPosReal=Screen:egpCursor(find())
    if(CursorPosReal!=vec2(-1)){
        CursorPos=CursorPosReal
        if(AppTimerClk){
            if(!find():inVehicle()){Mouse1=find():keyUse()|find():keyPressed("e")}
            else{Mouse1=find():keyAttack1()}
        }
    }
    
    if(AppTimerClk){
        #Click event and sound
        ChangedMouse1=changed(Mouse1)
        if(click()){sound("Click")}
        
        #NoFullLoad
        if(!FullLoad&!App:count()){ROM["System",table]["FullLoad",number]=1 reset()}
        
        
        #Changed
        SysTextEnableChanged=changed(SysTextEnable)
        DialogAppChanged=changed(DialogApp)
    }
    
    #Screen mirroring
    if(Device&Device:entity():type():find("egp")){
        Screen:egpSaveFrame("Mirror")
        Device:egpLoadFrame("Mirror")
    }

    if(FullLoad){
                
        if(!Screen:egpHasObject(1)){
            Screen:egpBox(1,Resolution/2,Resolution) Screen:egpColor(1,ROM["System",table]["Wallpaper",vector]) #Wallpaper
            Screen:egpBox(2,vec2(),vec2()) Screen:egpAlpha(2,120) #Wallpaper
            Screen:egpBox(3,vec2(Resolution:x()/2,Resolution:y()-8),vec2(Resolution:x(),16)) Screen:egpColor(3,vec4(vec(20),220)) #Task bar
            
            #Time and Battery level
            egpWhiteText(9,3,format("%d:%02d",time("hour"),time("min")),vec2(Resolution:x()/2-5,-5),10,2) Screen:egpFont(9,"Courier New")
            egpWhiteText(10,3,"",vec2(-Resolution:x()/2+18,-5),10) Screen:egpFont(10,"Courier New")
            
            #StartMenu button
            Screen:egpBox(4,vec2(8,Resolution:y()-8),vec2(16,16)) Screen:egpAlpha(4,0)
            for(I=5,8){Screen:egpBox(I,vec2(),vec2(6,6)) Screen:egpParent(I,4)}
                Screen:egpPos(5,vec2(-4,-4))
                Screen:egpPos(6,vec2(-4, 3))
                Screen:egpPos(7,vec2( 3,-4))
                Screen:egpPos(8,vec2( 3, 3))
        }
        
        elseif(AppTimer>1&threadClk()){
            
            if(appTimer(1000)){
                if(changed(Screen:entity():getColor())&AppTimer>20){ROM["System",table]["Wallpaper",vector]=Screen:entity():getColor()}
                local FreeEGPID=AppEGPID["FreeEGP",array][1,vector2]
                if(FreeEGPID:x()>FreeEGPID:y()-50){print("You have less than 50 EGP ID!")}
                Screen:egpColor(1,ROM["System",table]["Wallpaper",vector]) #Wallpaper color
                Screen:egpSetText(9,format("%d:%02d", date()["hour",number], date()["min",number])) #Time
                Screen:egpSetText(10,AppPos:keys():concat(" ")) #Apps list
            }
            
            local AppListInrange=inrange(CursorPos,vec2(16,Resolution:y()-16),Resolution-vec2(50,0))
            if(changed(AppListInrange)&!AppListInrange){Screen:egpSize(2,vec2())}
            if(AppListInrange){
                #local AppListLength = local AppListSize= 0 
                local TextSize=textSizeX(10)
                for(I=1,AppPos:count()){ 
                    AppListSize=AppPos:keys()[I,string]:length()*TextSize
                  #  if(inrange(CursorPos,vec2(AppListLength+16,Resolution:y()-16),vec2(AppListLength+AppListSize,Resolution:y()))){
                   # Screen:egpBox(2,vec2(AppListLength+AppListSize/2+16,Resolution:y()-8),vec2(AppListSize,16))
                    if(click()){callApp(AppPos:keys()[I,string]) Screen:egpSetText(10,AppPos:keys():concat(" ")) break} }
                   # AppListLength+=AppListSize+TextSize
                }
            }
            
            #StartMenu
            local IconInrange=inrange(CursorPos,vec2(0,Resolution:y()-16),vec2(16,Resolution:y()))
            if(changed(IconInrange)){Screen:egpAlpha(4,255*IconInrange) for(I=5,8){Screen:egpColor(I,IconInrange ? ROM["System",table]["Theme",vector] : vec(255))} }
            elseif(IconInrange&click()&!glbN("StartMenu","Active")){appLaunchT("StartMenu")}
        }
        
        if(App["StartMenu",table]){ThisApp="StartMenu"
            #Make EGP memory
            if(AppLaunch==ThisApp){
                local EGPCount=11+romR("IconList"):count()*3
                appN("Active",1) 
                appN("Pos",20) 
                appV2("Size",vec2(200,130+40*(romR("IconList"):count()>9)))
                appR("AppsList",AllApps:keys():concat("\n"):replace("DialogApp",""):replace("\n\n","\n"):explode("\n"))
                
                AppEGPID[ThisApp,vector2]=vec2(AppEGPID["FreeEGP",array][1,vector2]:x(),EGPCount)
                AppEGPID["FreeEGP",array][1,vector2][1]=AppEGPID["FreeEGP",array][1,vector2]:x()+EGPCount+5
                
                AppLaunch=""
            }
            
            local EGP = egp()
            appN("Inrange",egpInrange(EGP))
            local Size = appV2("Size")
            local PosN=appN("PosN")
            local AppsList=appR("AppsList")
            local IconList=romR("IconList")
            
            if(!Screen:egpHasObject(EGP)){
                Screen:egpBox(EGP,vec2(100,appN("PosN")+Resolution:y()+77),Size) Screen:egpColor(EGP,vec4(vec(40),220))
                Screen:egpBox(EGP+2,vec2(),vec2(65,10)) Screen:egpParent(EGP+2,EGP) Screen:egpAlpha(EGP+2,0)
                Screen:egpBoxOutline(EGP+9,vec2(),vec2(38)+Resolut{'Windows10.3M
